npm init -y for a default set-up
npm install react react-dom
npm install typescript @types/react @types/react-dom @types/node ts-node --save-dev
npx tsc --init
or tsconfig.json:
{
    "compilerOptions": {
        "target": "ES6",
        "jsx": "react-jsx",
        "module": "ESNext",
        "moduleResolution": "node",
        "esModuleInterop": true,
        "allowImportingTsExtensions": true,
        "noEmit": true,
        "forceConsistentCasingInFileNames": true,
        "strict": true,
        "skipLibCheck": true,
        "types": ["cypress", "jest", "node"]
    },
    "include": ["src", "cypress"],
    "exclude": ["node_modules", "build", "dist"]
}


create "eslint.d.ts" file with:
declare module 'eslint-plugin-react-hooks';
declare module 'eslint-plugin-react-refresh';


create "eslint.config.js" file in the root with:
import tsParser from '@typescript-eslint/parser';
import react from 'eslint-plugin-react';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';

export default [
    {
        files: [
            '**/*.js',
            '**/*.jsx',
            '**/*.ts',
            '**/*.tsx',
            '**/*.json'
        ],
        languageOptions: {
            parser: tsParser,
            ecmaVersion: 2020,
            sourceType: 'module',
        },
        plugins: {
            react,
            'react-hooks': reactHooks,
            'react-refresh': reactRefresh,
        },
        rules: {
            indent: ['error', 4],
            'react/react-in-jsx-scope': 'off',
            'react/prop-types': 'off',
            'no-unused-vars': ['warn'],
            'no-unused-vars': ['error'],
            'curly': 'error',
            'keyword-spacing': ['error', { before: true, after: true }],
            'arrow-parens': ['error', 'always'],
        },
    },
    {   
        ignores: [
            ".node_modules/",
            ".build/",
            ".dist/"
        ]
    }
];


npm install webpack webpack-cli webpack-dev-server --save-dev
npm install html-webpack-plugin --save-dev
npm install eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-react-refresh --save-dev
npm install @babel/core @babel/preset-react @babel/preset-env @babel/preset-typescript babel-loader --save-dev
npm install sass-loader sass css-loader mini-css-extract-plugin --save-dev
create "src/index.tsx" with the lines:
import ReactDOM from 'react-dom/client';
import { StrictMode } from 'react';
import App from './components/App';
import './scss/style.scss';

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(
  <StrictMode>
    <App />
  </StrictMode>,
);

create "webpack.config.js" file in the root of a project with following:
import path from 'path';
import HtmlWebpackPlugin from 'html-webpack-plugin';
import MiniCssExtractPlugin from 'mini-css-extract-plugin';

const config = {
    entry: './src/index.tsx',
    output: {
        path: path.resolve('build'),
        filename: 'bundle.js',
        clean: true //Clean the directory before each build
    },
    resolve: {
        extensions: ['.ts', '.tsx', '.js', '.jsx'], //Automatically resolve extensions
    },
    module: {
        rules: [
            {
                test: /\.(ts|tsx|js|jsx)$/, //Match JS and JSX files
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader', //For JavaScript and JSX files
                },
            },
            {
                test: /\.scss$/, //Match SCSS files
                use: [
                    MiniCssExtractPlugin.loader, //Extract CSS into files
                    'css-loader',    //Turn CSS into CommonJS
                    'sass-loader',   //Compile SASS to CSS
                ],
            },
            /*{
                test: /\.css$/, //Match plain CSS files
                use: ['style-loader', 'css-loader'], //Process CSS files
            },*/
            {
                test: /\.(png|jpg|jpeg|gif|svg|mp4|webm|ogg|mov|mp3|wav|flac|aac)$/, //Handle image, video and audio files
                type: 'asset/resource',
                generator: {
                    filename: 'assets/[name].[hash][ext]', //Output path for all assets (images, videos, audios)
                },               
            }
        ],
    },
    plugins: [
        new HtmlWebpackPlugin({
            template: './public/index.html',
            favicon: './public/favicon.png'
        }),
        new MiniCssExtractPlugin({
            filename: 'style.css',
        }),
    ],
    devServer: {
        static: './build', //Serve files from "build"
        port: 3000, //Development server port
	hot: true,
        open: true
    },
    mode: 'development',
};
export default config;
  

create "public" folder in the root with index.html with <div id="root"></div> in the <body> and its favicon.
create "babel.config.js" in the root with lines:
const babelConfig = {
    "presets": [
        ["@babel/preset-env"],
        ["@babel/preset-react", { "runtime": "automatic" }],
    	["@babel/preset-typescript"]
    ]
};
export default babelConfig;

In package.json make sure to have:
"scripts": {
    "dev": "webpack serve --mode development",
    "build": "webpack --mode production"
},

and also
"type": "module"

Use "npm run dev" to run the server and "npm run build" for production purposes
To use "assets" content you should import it within React components:
import icon from '../../src/assets/images/icon-square-big.png';
...
                <img src={icon} height="400" alt="Webpack icon" title="Webpack icon"></img>
...
__________________________
Tests:
npm install cypress@latest jest@latest @testing-library/react@latest @testing-library/jest-dom@latest @types/jest@latest --save-dev
npx cypress open
npm run test (for jest)
or add to package.json in "scripts":
"test": "concurrently \"jest\" \"cypress open\"",
and then npm install concurrently --save-dev
and now use npm run test for both simultaneously

__________________________
Deployment:
In order to deploy a React (with Webpack) application follow:
Run: npm install gh-pages --save-dev
In "package.json" file at the top of it add: 
    "homepage": "https://sleeplessglory.github.io/repositoryName/"
In the same file in "scripts" section add: 
    "deploy": "gh-pages -d build"
Now head to "webpack.config.js" file and add to "output":
    publicPath: "/repositoryName/"
and change the "mode" to 'production'
Push all your commits to the remote repository and then run: 
npm run build
npm run deploy
Wait a few minutes and check out your deployed application on github pages (settings -> pages)
Note: If "gh-pages" branch was created and nothing is happening within (settings -> pages), then over 
there and in "Source" choose "Deploy from a branch". Then choose "gh-pages" branch and save it.
The process has to start now.